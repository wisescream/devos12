stages:
  - test
  - build
  - deploy

variables:
  # GitLab Container Registry settings
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA
  FLASK_ENV: "production"

# Cache Python dependencies between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - venv/
    - .cache/pip

test:
  stage: test
  image: python:3.9-slim
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt pytest
  script:
    - pytest tests/ --junitxml=test-results.xml
  artifacts:
    when: always
    reports:
      junit: test-results.xml
    paths:
      - test-results.xml

build:
  stage: build
  image: docker:20.10
  services:
    - docker:20.10-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull -t $DOCKER_IMAGE:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG


deploy:
  stage: deploy
  image: docker:20.10
  variables:
    DOCKER_HOST: "tcp://192.168.11.158:2375"  # Your Kali VM's IP
  script:
    # Pull and run the container
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull "$DOCKER_IMAGE:$DOCKER_TAG"
    - docker stop flask-app || true
    - docker rm flask-app || true
    - docker run -d --name flask-app -p 5000:5000 "$DOCKER_IMAGE:$DOCKER_TAG"
  only:
    - main